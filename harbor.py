# harbor.py is a function that takes input from the users app and formats it
# in a Beacon message to send to harbor-stream.
#
# It takes 4 required fields:
# body: a valid json object that will make up the body of the Beacon Message
# apiKey: the users apiKey that was generated by harbor
# appVersionId: an identifier for an app in Harbor.  Must be registered in Harbor
# beaconVersionId: an identifier for the beacon.  Must be registered in Harbor
#
# It also takes 3 optional keys.  2 of them are sent as headers to harbor-stream
# but are not checked by harbor-stream as they can be any string.
# beaconInstanceId: a string to identify where the Beacon came from
# beaconMessageType: a meta field that allows many systems in Harbor to filter
#                    beacon messages across different beaconInstanceId's
# The third option key is
# verbose: A True or False that prints the Beacon message to the console.
#
# harbor.py does very little error checking as harbor-stream will respond with error
# messages if the program sends and invalie apiKey, beaconInstanceId or
# beaconMessageType

import json
import requests
from pprint import pprint

def send_beacon(body, apiKey, beaconVersionId, appVersionId, **kwargs):
    print_beacon = False
    # only Harbor devs would ever need to change this
    harbor_url = "https://harbor-stream.hrbr.io/beacon"
    # Creates required headers
    headers = {
        'Content-Type': 'application/json',
        'apiKey': apiKey,
        'beaconVersionId': beaconVersionId,
        'appVersionId': appVersionId,
    }

    # Check for optional headers and whether to print the Beacons to the console
    for arg in kwargs:
        if arg.lower() == "verbose":
            print_beacon = kwargs(arg)
        elif (str(arg) == "beaconInstanceId" or str(arg) == "beaconMessageType"):
            headers[str(arg)] = kwargs[arg]
        else:
            print("%s is not a valid argument for send_beacon." % str(arg))
            exit()

    response = requests.post(harbor_url, headers = headers, json=body)

    # Thanks to great code on harbor-steam we don't have to write error checkers
    # on each of the fields.  If we try to send an invalid message we grab
    # the error code from harbor-stream and inform the developer
    if response.status_code != 201:
        print(response.status_code)
        print(response.text)
        exit()
    else:
    # Prints the beacon to the console if verbose = True
        if print_beacon:
            print("Beacon Header: ")
            pprint(headers)
            print("Beacon Body: ")
            pprint(body)
